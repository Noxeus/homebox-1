#!/bin/dash

# Postlogin script for Dovecot.
# This script will calls other scripts in /etc/dovecot/login-scripts
# Each script may contains specific comments like below:
# Blocking: Yes
# RunAsUser: Yes
# NeedDecryptKey: No
# Explanation:
# - Blocking: <Yes|No>
#   Wait for the script execution to be finished before continuing,
#   This might be used to block login, for instance from some countries or to use TFA
# - RunAsUser: <User|Postmaster>
#   User: Run the script as the user that tries to login, by dropping privileges.
#   This is useful, for instance to import emails from other servers
#   Postmaster: Run as the postmaster user, with more privileges
# - NeedDecryptKey: <Yes|No>
#   The decryption key is needed for instance when importing emails from other platforms,
#   to decrypt the import settings (e.g. credentials)

# Make sure to remember the previous command
INITIAL_COMMAND="$@"

# Get the list of scripts to run
login_scripts=$(ls /etc/dovecot/login-scripts)

# Exit codes
CONTINUE=0
WARNING=1
DENIED=2
ERROR=3

# Maximum number of seconds SOGo use to make a new connection (5s average)
SOGO_CONNECTIION_SECONDS=10

log_error() {
    echo "$@" 1>&2;
}

# The following variables will be logged by the last script
# Or used to send a warning in real time to the user
SOURCE='imap'
STATUS='OK'
REASON=''
DETAILS=''

# Get the external xmpp/email alert address
ALERT_ADDRESS=$(grep ALERT_ADDRESS /etc/homebox/access-check.conf | cut -f 2 -d =)

# When importing emails, the remote command is always '127.0.0.1'
# Run the import then exit.
if [ "$MASTER_USER" = "import" ]; then

    # Check the remote IP is local
    if [ "$IP" = "127.0.0.1" ]; then
        exec $INITIAL_COMMAND
    else
        # TODO: Send an alert to the postmaster and to root!
        # The import account should be used only locally
        log_error "Error: remote access with the import account from IP <$IP>"
        exit $DENIED
    fi
fi

# TODO: Send an alert to the user that the master is accessing their account
if [ "$MASTER_USER" = "master" ]; then
    exec $INITIAL_COMMAND
fi

if [ "$IP" = "127.0.0.1" ]; then

    # SOGo users can login using their ID or their full name. However, the
    # SOGo daemon is sending the ID command after the authentication
    # instead of sending it before.
    # Details here: https://sogo.nu/bugs/view.php?id=2979

    # This part of the script tries to get the real IP address
    # from SOGo successful connection entries in the SOGo log file

    # Build a regular expression to get the last successful entry from this user
    fullName=$(getent passwd "$USER" | cut -f 5 -d :)
    regex="successful login from '[0-9a-f\\.:]+' for user '(${USER}|${fullName})'"

    # Get the last successful entry in the SOGo logs, for this user
    found=$(tail -n 1000 /var/log/sogo/sogo.log | grep -E "$regex" | tail -n 1)

    # If this is empty, then the user might access the platform using a local IMAP connection
    # Do not accept connection from loopback
    if [ "$found" = "" ]; then
        log_error "Error: cannot find real IP for logged in user '$USER'"
        exit $CONTINUE
    fi

    # Get the unix time for this entry
    date=$(echo "$found" | cut -f 1,2,3 -d ' ')
    conntime=$(date -d "$date" +%s)
    now=$(date +%s)
    delay=$(( $now - $conntime ))

    if [ $delay -lt $SOGO_CONNECTIION_SECONDS ]; then
        IP=$(echo "$found" | sed -E "s/.*successful login from '([^']+)'.*/\\1/")
        SOURCE=SOGo
    else
        log_error "Error: cannot find real IP for logged in user '$USER' lip: '$LOCAL_IP'"
        exit $ERROR
    fi

elif [ "$LOCAL_IP" = "127.0.0.2" ]; then
    # A simple trick to recognise RoundCube logins
    SOURCE=Roundcube
fi

# Call all the scripts in the folder /etc/dovecot/login-scripts,
# These scrips are non blocking, and run as the user
for script in $login_scripts; do

    # Check the scripts requirements
    scriptPath="/etc/dovecot/login-scripts/${script}"
    runAsUser=$(grep -c '^# RunAs: User' "${scriptPath}")
    runAsPostmaster=$(grep -c '^# RunAs: Postmaster' "${scriptPath}")
    needDecriptKey=$(grep -c '^# NeedDecryptKey: Yes' "${scriptPath}")
    blocking=$(grep -c '^# Blocking: Yes' "${scriptPath}")
    scriptDescription=$(grep '^# Description:' "${scriptPath}" | sed 's/.*: //')
    reportingScript=$(grep -c '^# Reporting: Yes' "${scriptPath}")
    alwaysRun=$(grep -c '^# AlwaysRun: Yes' "${scriptPath}")

    # When the access has been denied by one script, skip the next
    # scripts, except if it is explitcitly marked as run (e.g. logging script)
    if [ "$STATUS" = "DENIED" ] && [ "$alwaysRun" = "0" ]; then
        continue
    fi

    # Add the source (Roundcube/SOGo/IMAP) and the current status
    PASS_ENV="SOURCE=$SOURCE STATUS=$STATUS REASON='$REASON' DETAILS='$DETAILS'"

    # Add the global / external email address to send alerts
    if [ "$reportingScript" = "1" ]; then
        PASS_ENV="${PASS_ENV} ALERT_ADDRESS=$ALERT_ADDRESS"
    fi

    # Email import scripts need the decryption key to access the password
    # Pass the decryption key only if the current access is valid
    if [ "$STATUS" != "DENIED" ] && [ "$needDecriptKey" = "1" ]; then
        # Pass the sytem key to the login scripts,
        # So they can decrypt sensitive content.
        # A future version would probably GPG keys for each user.
        DECRYPT_KEY=$(cat /etc/homebox/system-key)
        PASS_ENV="${PASS_ENV} DECRYPT_KEY=$DECRYPT_KEY"
    fi

    # Email import scripts run as the current user
    # For instance, a TFA could run as postmaster
    if [ "$runAsUser" = "1" ]; then
        RunAs="${USER}"
    elif [ "$runAsPostmaster" = "1" ]; then
        RunAs="postmaster"
    else
        # Run as user by default
        RunAs="${USER}"
    fi

    # Run the script, in blocking mode or not
    # When running in blocking mode, check the exit code status
    # or exit
    if [ "$blocking" = "1" ]; then

        logger "Running foreground script ${scriptPath} as '$RunAs'"
        DETAILS=$(su -m "$RunAs" -c "${PASS_ENV} ${scriptPath}" 2>&1)
        exitCode=$?

        # If the access is denied, send an alert to the user using xmpp
        if [ "$exitCode" = "$DENIED" ]; then
            # This may happens when the user has activated restrictions by IP or country
            log_error "Error: access denied for user '$USER' by script '$script'"
            REASON="Access denied by $scriptDescription"
            STATUS='DENIED'

        # Send a warning to the user, perhaps using xmpp
        elif [ "$exitCode" = "$WARNING" ]; then
            log_error "Warning: received warning for user '$USER' by script '$script'"
            REASON="Access warning by $scriptDescription"
            STATUS='WARNING'

        # An error happened, so this is probably a bug
        elif [ "$exitCode" = "$ERROR" ]; then
            log_error "Error: error when running post-login script '$SCRIPT' for user '$USER'"
            REASON="Error returned by $scriptDescription"
            STATUS='DENIED'
        fi
    else
        # Run the script without waiting for it to finish.
        # This is actually used by the external emails import script.
        logger "Running background script ${scriptPath} as '$RunAs'"
        su -m "$RunAs" -c "${PASS_ENV} ${scriptPath}" 1>&2 &
    fi
done

# Pass the hand back to dovecot or exit with the last error code
if [ "$STATUS" = "OK" ] || [ "$STATUS" = "WARNING" ]; then
    exec "$INITIAL_COMMAND"
fi

# Exit now, the error will be logged.
exit $DENIED
