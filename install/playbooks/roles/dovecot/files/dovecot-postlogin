#!/bin/dash
# Postlogin script for Dovecot.
# This script will calls other scripts in /etc/dovecot/login-scripts
# Each script may contains specific comments like below:
# Blocking: Yes
# RunAsUser: Yes
# NeedDecryptKey: No
# Explanation:
# - Blocking: <Yes|No>
#   Wait for the script execution to be finished before continuing,
#   This might be used to block login, for instance from some countries or to use TFA
# - RunAsUser: <User|Postmaster>
#   User: Run the script as the user that tries to login, by dropping privileges.
#   This is useful, for instance to import emails from other servers
#   Postmaster: Run as the postmaster user, with more privileges
# - NeedDecryptKey: <Yes|No>
#   The decryption key is needed for instance when importing emails from other platforms,
#   to decrypt the import settings (e.g. credentials)

# Make sure to remember the previous command
INITIAL_COMMAND="$@"

# Get the list of scripts to run
login_scripts=$(ls /etc/dovecot/login-scripts)

# Exit codes
CONTINUE=0
WARNING=1
DENIED=2
ERROR=3

log_error() {
    echo "$@" 1>&2;
}

# Default source is IMAP
SOURCE='imap'

if [ "$IP" = "127.0.0.1" ]; then
    
    # The first connection with Roundcube uses 127.0.0.1 as a remote IP
    # just ignores it
    if [ "$IP" = "127.0.0.2" ]; then
        exit 0
    fi
    
    # SOGo users can login using their ID or their full name. However, the
    # SOGo daemon is sending the ID command after the authentication
    # instead of sending it before.
    # Details here: https://sogo.nu/bugs/view.php?id=2979

    # This part of the script tries to get the real IP address
    # from SOGo successful connection entries in the SOGo log file

    # Build a regular expression to get the last successful entry from this user
    fullName=$(getent passwd "$USER" | cut -f 5 -d :)
    regex="successful login from '[^']+' for user '(${USER}|${fullName})'"

    # Get the last successful entry in the SOGo logs, for this user
    found=$(tail -n 1000 /var/log/sogo/sogo.log | grep -E "$regex" | tail -n 1)

    # If this is empty, then the user might access the platform using a local IMAP connection
    # Do not accept connection from loopback
    if [ "$found" = "" ]; then
        log_error "Cannot find real IP for logged in user '$USER'"
        exit $CONTINUE
    else
        IP=$(echo "$found" | sed -E "s/.*successful login from '([^']+)'.*/\\1/")
        SOURCE=SOGo
    fi
elif [ "$LOCAL_IP" = "127.0.0.2" ]; then
    # A simple trick to recognise RoundCube logins
    SOURCE=Roundcube
fi

# Call all the scripts in the folder /etc/dovecot/login-scripts,
# These scrips are non blocking, and run as the user
for script in $login_scripts; do

    # Check the scripts requirements
    scriptPath="/etc/dovecot/login-scripts/${script}"
    runAsUser=$(grep -c '^# RunAs: User' "${scriptPath}")
    runAsPostmaster=$(grep -c '^# RunAs: Postmaster' "${scriptPath}")
    needDecriptKey=$(grep -c '^# NeedDecryptKey: Yes' "${scriptPath}")
    blocking=$(grep -c '^# Blocking: Yes' "${scriptPath}")

    # The file that will contains the warning message to send to the user
    warningsFile="/home/users/$USER/mails/security/last-warnings.txt"
    
    # Add the source (Roundcube/SOGo/IMAP)
    PASS_ENV="SOURCE=${SOURCE}"

    # Email import scripts need the decryption key to access the password
    if [ "$needDecriptKey" = "1" ]; then
        # Pass the sytem key to the login scripts,
        # So they can decrypt sensitive content.
        # A future version would probably GPG keys for each user.
        DECRYPT_KEY=$(cat /etc/homebox/system-key)
        PASS_ENV="${PASS_ENV} DECRYPT_KEY=$DECRYPT_KEY"
    fi

    # Email import scripts run as the current user
    # For instance, a TFA could run as postmaster
    if [ "$runAsUser" = "1" ]; then
        RunAs="${USER}"
    elif [ "$runAsPostmaster" = "1" ]; then
        RunAs="postmaster"
    else
        # Run as user by default
        RunAs="${USER}"
    fi

    # Run the script, in blocking mode or not
    # When running in blocking mode, check the exit code status
    # or exit
    if [ "$blocking" = "1" ]; then
        su -m "$RunAs" -c "${PASS_ENV} ${scriptPath}"
        exitCode=$?

        # If the access is denied, send an alert to the user using xmpp
        if [ "$exitCode" = "$DENIED" ]; then
            # This may happens when the user has activated restrictions by IP or country
            log_error "Access denied for user '$USER' by script '$script'"
            exit $DENIED

        # Send a warning to the user, perhaps using xmpp
        elif [ "$exitCode" = "$WARNING" ]; then
            warning_title=$(head -n 1 "/home/users/$USER/mails/security/last-warnings.txt")
            log_error "Sent warning for user '$USER' by script '$script': $warning_title"

        # An error happened, so this is probably a bug
        elif [ "$exitCode" = "$ERROR" ]; then
            log_error "Error when running post-login script '$SCRIPT' for user '$USER'"
            exit $ERROR

        fi
    
    else
        # Run the script without waiting for it to finish.
        # This is actually used by the external emails import script.
        su -m "$RunAs" -c "${PASS_ENV} ${scriptPath}" &
    fi
    
done

# Pass the hand back to dovecot
exec "$INITIAL_COMMAND"
