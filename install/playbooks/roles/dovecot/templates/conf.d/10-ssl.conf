##
## SSL settings
##

# SSL/TLS support: yes, no, required. <doc/wiki/SSL.txt>
ssl = yes

# PEM encoded X.509 SSL/TLS certificate and private key. They're opened before
# dropping root privileges, so keep the key file unreadable by anyone but
# root. Included doc/mkcert.sh can be used to easily generate self-signed
# certificate, just make sure to update the domains in dovecot-openssl.cnf
protocol imap {
  ssl_cert = </etc/letsencrypt/live/imap.{{ network.domain }}/fullchain.pem
  ssl_key = </etc/letsencrypt/live/imap.{{ network.domain }}/privkey.pem
}

protocol sieve {
  ssl_cert = </etc/letsencrypt/live/imap.{{ network.domain }}/fullchain.pem
  ssl_key = </etc/letsencrypt/live/imap.{{ network.domain }}/privkey.pem
}

protocol lmtp {
  ssl_cert = </etc/letsencrypt/live/imap.{{ network.domain }}/fullchain.pem
  ssl_key = </etc/letsencrypt/live/imap.{{ network.domain }}/privkey.pem
}

{% if mail.pop3 %}
protocol pop3 {
  ssl_cert = </etc/letsencrypt/live/pop3.{{ network.domain }}/fullchain.pem
  ssl_key = </etc/letsencrypt/live/pop3.{{ network.domain }}/privkey.pem
}
{% endif %}

# Require that CRL check succeeds for client certificates.
#ssl_require_crl = yes

# Directory and/or file for trusted SSL CA certificates. These are used only
# when Dovecot needs to act as an SSL client (e.g. imapc backend). The
# directory is usually /etc/ssl/certs in Debian-based systems and the file is
# /etc/pki/tls/cert.pem in RedHat-based systems.
#ssl_client_ca_dir =
#ssl_client_ca_file =

# Request client to send a certificate. If you also want to require it, set
# auth_ssl_require_client_cert=yes in auth section.
#ssl_verify_client_cert = no

# Which field from certificate to use for username. commonName and
# x500UniqueIdentifier are the usual choices. You'll also need to set
# auth_ssl_username_from_cert=yes.
#ssl_cert_username_field = commonName

# DH parameters
ssl_dh_parameters_length = 2048

# SSL protocols to use
ssl_protocols = !SSLv3, !TLSv1, !TLSv1.1

# SSL ciphers to use
ssl_cipher_list = ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384

# Prefer the server's order of ciphers over client's.
ssl_prefer_server_ciphers = no

# SSL crypto device to use, for valid values run "openssl engine"
#ssl_crypto_device =

# SSL extra options. Currently supported options are:
#   no_compression - Disable compression.
#ssl_options =
