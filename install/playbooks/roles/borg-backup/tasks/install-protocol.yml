---

- name: Extract backup location details
  tags: backup, facts
  set_fact:
    protocol: '{{ location.url | urlsplit("scheme") }}'
    location_host: '{{ location.url | urlsplit("hostname") }}'
    location_user: '{{ location.url | urlsplit("username") | default("backup") }}'
    location_path: '{{ location.url | urlsplit("path") }}'
    location_details: '{{ location.url | urlsplit }}'

- name: Create the backup config into /etc/homebox
  tags: config
  ini_file:
    path: '/etc/homebox/backup.ini'
    section: '{{ location.name }}'
    option: '{{ option.name }}'
    value: '{{ option.value }}'
    mode: '0600'
  with_items:
    - name: url
      value: '{{ location.url }}'
    - name: active
      value: '{{ location.active }}'
    - name: keep_daily
      value: '{{ location.keep_daily | default(1) }}'
    - name: keep_weekly
      value: '{{ location.keep_weekly | default(1) }}'
    - name: keep_monthly
      value: '{{ location.keep_monthly | default(1) }}'
    - name: compression
      value: '{{ location.compression | default("lz4") }}'
  loop_control:
    loop_var: option


###############################################################################

- name: Create the local backup directory
  when: protocol == 'dir'
  file:
    path:  '{{ location_path }}'
    state: directory
    mode: 0700
    owner: root
    group: root

###############################################################################
- name: Install the required file systems
  tags: ssh
  when: protocol == 'ssh'
  apt:
    name: 'sshfs'
    state: latest

- name: Configure the backup location
  tags: ssh
  when: protocol == 'ssh'
  template:
    src: 'ssh-config'
    dest: '/root/.ssh/config.d/backup-{{ location.name }}'

- name: Create the global ssh config for root
  when: protocol == 'ssh'
  tags: ssh
  assemble:
    src: /root/.ssh/config.d
    dest: /root/.ssh/config
    delimiter: "#---\n"
    mode: '0600'

- name: Get backup server signature
  when: protocol == 'ssh'
  tags: ssh
  shell: 'ssh-keyscan -H {{ location_host }}'
  register: keyscan

- name: Add the backup server to known_hosts, once for all
  when: protocol == 'ssh'
  tags: ssh
  lineinfile:
    path: /root/.ssh/known_hosts
    line: '{{ line }}'
    create: yes
  with_items:
    - '{{ keyscan.stdout_lines }}'
  loop_control:
    loop_var: line

###############################################################################
# For Samba drives, uses cifs-utils
- name: Install the required file systems
  when: protocol == 'smb'
  apt:
    name: 'cifs-utils'
    state: latest

###############################################################################
# For USB drives, uses systemd to automaticall mount the drives

- name: Set automatic mount locations
  when: protocol == 'usb'
  tags: systemd
  set_fact:
    automount: >-
     {{ backup.locations
     | selectattr("automount", "defined")
     | selectattr("automount", "equalto", true)
     | list }}

- name: Add mount point definition for this device
  when: protocol == 'usb'
  register: mount_systemd
  notify: Reload Systemd
  tags: systemd
  template:
    src: mount-usb.ini
    dest: '/etc/systemd/system/mnt-backup-{{ mnt.name }}.mount'
  with_items:
    - '{{ automount }}'
  loop_control:
    loop_var: mnt

- name: Enable the mount service
  when: protocol == 'usb'
  tags: systemd
  systemd:
    name: 'mnt-backup-{{ mnt.name }}.mount'
    enabled: true
    state: started
  with_items:
    - '{{ automount }}'
  loop_control:
    loop_var: mnt

- name: Add automount definition for this device
  when: protocol == 'usb'
  notify: Reload Systemd
  tags: systemd
  template:
    src: mount-auto.ini
    dest: '/etc/systemd/system/mnt-backup-{{ mnt.name }}.automount'
  with_items:
    - '{{ automount }}'
  loop_control:
    loop_var: mnt

- name: Enable the automount service
  when: protocol == 'usb'
  tags: systemd
  failed_when: false
  systemd:
    name: 'mnt-backup-{{ mnt.name }}.automount'
    enabled: true
    state: started
  with_items:
    - '{{ automount }}'
  loop_control:
    loop_var: mnt
