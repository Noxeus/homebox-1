---

- name: Install required python packages
  tags: apt
  apt:
    name: python3-psutil
    state: latest

- name: Install borgbackup package
  tags: apt
  apt:
    name: borgbackup
    default_release: stretch-backports
    state: latest

- name: Create the backups mount point root
  file:
    path: /mnt/backup
    state: directory

- name: Create the backup config into /etc/homebox
  tags: config
  ini_file:
    path: '/etc/homebox/backup.ini'
    section: 'alerts'
    option: '{{ option.name }}'
    value: '{{ option.value }}'
    mode: '0600'
  with_items:
    - name: from
      value: '{{ backup.alerts.from }}'
    - name: recipient
      value: '{{ backup.alerts.recipient }}'
    - name: jabber
      value: '{{ backup.alerts.jabber }}'
  loop_control:
    loop_var: option

- name: Create the backup keys directory locally if it does not exists
  register: backup_keys_local_directory
  delegate_to: localhost
  tags: sync
  file:
    path: '{{ backup_directory }}/backup-keys/'
    state: directory

# If the folder already existed, upload the keys on the server.
# The "--ignore-existing" option skip the files already existing,
# the '--update' option make sure to not overwrite new keys.
- name: Upload the backup encryption keys if they exists
  when: not backup_keys_local_directory.changed
  register: keys_restore
  tags: sync
  synchronize:
    src: '{{ backup_directory }}/backup-keys/'
    dest: /tmp/backup-keys/
    owner: no
    group: no
    perms: yes
    rsync_opts:
      - '--no-motd'
      - '--ignore-existing'
      - '--update'
      - '--include=backup-*.key'

- name: Configure each protocol
  include_tasks: 'install-protocol-{{ location.url | urlsplit("scheme") }}.yml'
  with_items:
    - '{{ backup.locations | default([]) }}'
  loop_control:
    loop_var: location

- name: Add the cron entries to backup the home directory
  tags: config
  template:
    src: cron-backup-script.sh
    dest: '/etc/cron.{{ location.frequency | default("daily") }}/backup-{{ location.name }}'
    mode: '0700'
  with_items:
    - '{{ backup.locations | default([]) }}'
  loop_control:
    loop_var: location

- name: Add the cron entries to check the backup
  register: backup_config
  tags: config
  template:
    src: cron-check-script.sh
    dest: '/etc/cron.{{ location.check_frequency | default("monthly") }}/backup-check-{{ location.name }}'
    mode: '0700'
  with_items:
    - '{{ backup.locations | default([]) }}'
  loop_control:
    loop_var: location

- name: Create a random passphrase for encrypted backup
  tags: encryption
  set_fact:
    backup_key: '{{ lookup("password", "{{ encryption.backupKeyParams }}") }}'

- name: Save the passphrase
  tags: encryption
  template:
    src: backup-key
    dest: /etc/homebox/backup-key
    owner: root
    group: root
    mode: '0400'

- name: Copy the backup script
  tags: scripts
  copy:
    src: backup.py
    dest: '/usr/local/sbin/backup'
    mode: '0700'

- name: Initialise the repository, to test access and retrieve the key
  when: backup.locations is defined and backup.locations != []
  tags: backup
  shell: >-
    /usr/local/sbin/backup --action init --config {{ location.name }}
  with_items:
    - '{{ backup.locations }}'
  loop_control:
    loop_var: location

- name: Import the backup encryption keys if they already exists
  when: keys_restore.changed and backup.locations is defined and backup.locations != []
  tags: key, import
  shell: >-
    test -f /tmp/backup-keys/{{ location.name }}.key &&
    borg key import --info
    {{ location.url | regex_replace("^[a-z0-9]+:/", "") }}
    /tmp/backup-keys/{{ location.name }}.key
    || /bin/true
  with_items:
    - '{{ backup.locations }}'
  loop_control:
    loop_var: location

- name: Create a temporary directory to save the backup keys
  file:
    path: /tmp/backup-keys
    state: directory
    mode: 0700

- name: Retrieve the backup encryption keys
  when: backup.locations is defined and backup.locations != []
  shell: >-
    borg key export
    {{ location.url | regex_replace("^[a-z0-9]+:/", "") }}
    /tmp/backup-keys/{{ location.name }}.key
  args:
    creates: '/tmp/backup-keys/{{ location.name }}.key'
  with_items:
    - '{{ backup.locations }}'
  loop_control:
    loop_var: location

# In this direction, we should overwrite the keys
# in case new ones have been created
- name: Retrieve the backup encryption keys on your local machine
  tags: sync
  synchronize:
    mode: pull
    src: /tmp/backup-keys
    dest: '{{ backup_directory }}'
    perms: yes
    rsync_opts:
      - '--no-motd'
      - '--include=backup-*.key'
      - '--update'

- name: Remove the backup keys directory, we don't need this anymore
  file:
    path: /tmp/backup-keys
    state: absent

- name: Restore the home folder from a previous installation
  when: backup.locations is defined and backup.locations != []
  tags: restore
  shell: >-
    /usr/local/sbin/backup --action restore --config {{ location.name }}
  with_items:
    - '{{ backup.locations | selectattr("restore", "defined") | selectattr("restore", "equalto", true) | list }}'
  loop_control:
    loop_var: location
