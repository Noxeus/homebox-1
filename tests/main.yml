---
## Self diagnostic / basic unit tests suite to run before commiting
##

- hosts: homebox
  vars_files:
    - '{{ playbook_dir }}/../config/defaults.yml'
    - '{{ playbook_dir }}/../config/system.yml'
  roles:
    - role: load-defaults
      tags: always

    - role: external-ip-type
      tags: always

    # Install development support packages needed to run the tests
    - role: dev-support
      tags: dev-support

    # Test the basic functions
    - role: system-base
      tags: system-base

    # Test LDAP functions and home folders
    - role: ldap
      tags: ldap
    - role: home-folders
      tags: home-folders

    # Test rspamd program
    - role: rspamd
      tags: rspamd
      when: mail.antispam.active

    # Test opendmarc and opendkim
    - role: opendmarc
      tags: opendmarc
    - role: opendkim
      tags: opendkim
      when: bind.propagation.check

    # Test mail related certificates
    - role: certificate
      tags: mail-certificates
      vars:
        certificate:
          type: smtp

    - role: certificate
      tags: mail-certificates
      when: mail.pop3
      vars:
        certificate:
          type: pop3

    - role: certificate
      tags: mail-certificates
      vars:
        certificate:
          type: imap


    # Test webmail certificate
    - role: certificate
      tags: webmail-certificate
      when: webmail.install
      vars:
        certificate:
          type: webmail

    # Test MTA (postfix) functions
    - role: postfix
      tags: postfix

    # Test MDA (dovecot) functions
    - role: dovecot
      tags: dovecot

    # Test Full text search
    - role: dovecot-fts
      tags: dovecot-fts
      when: mail.fts.active
      vars:
        test_dovecot: false
        test_script: true

    # Test autoconfiguration server
    - role: autoconfig
      tags: autoconfig
      when: mail.autoconfig

    # Test autodiscover server
    - role: autodiscover
      tags: autodiscover
      when: mail.autodiscover

    # Test DNS records for emails
    - role: dns-records
      tags: dns-records-email
      when: bind.install
      vars:
        records:
          type: '{{ external_ip_type }}'
          list:
            - name: 'main.{{ network.domain }}'
              value: '{{ network.external_ip }}'

    - role: dns-records
      tags: dns-records-email
      when: bind.install
      vars:
        records:
          type: '{{ external_ip_type }}'
          list:
            - name: 'imap.{{ network.domain }}'
              value: '{{ network.external_ip }}'
            - name: 'smtp.{{ network.domain }}'
              value: '{{ network.external_ip }}'

    - role: dns-records
      tags: dns-records-email
      when: bind.install
      vars:
        records:
          type: SRV
          list:
            - name: '_imap._tcp.{{ network.domain }}'
              value: '0 0 0 \.'
            - name: '_imaps._tcp.{{ network.domain }}'
              value: 'imap\.{{ network.domain }}'
            - name: '_submissions._tcp.{{ network.domain }}'
              value: 'smtp\.{{ network.domain }}'

    - role: dns-records
      tags: dns-records-email
      when: bind.install
      vars:
        records:
          type: TXT
          list:
            - name: '_dmarc.{{ network.domain }}'
              value: 'ru[af]=mailto:postmaster@{{ network.domain }}'
            - name: '{{ dkim.selector }}._domainkey.{{ network.domain }}'
              value: '{{ dkim.selector }}.{{ network.domain }}'

    - role: dns-records
      tags: dns-records-email
      when: bind.install
      vars:
        records:
          type: MX
          list:
            - name: '{{ network.domain }}'
              value: 'smtp.{{ network.domain }}'

    - role: dns-records
      tags: dns-records-email
      when: bind.install
      vars:
        records:
          type: TXT
          list:
            - name: '_mta-sts.{{ network.domain }}'
              value: 'v=STSv1; id=[a-zA-Z0-9]+'
            - name: '_smtp._tls.{{ network.domain }}'
              value: 'v=TLSRPTv1; rua=mailto:security@{{ network.domain }};'


    # Test pop3 specific DNS records
    - role: dns-records
      tags: dns-records-email-pop3
      when: bind.install and mail.pop3
      vars:
        records:
          type: '{{ external_ip_type }}'
          list:
            - name: 'pop3.{{ network.domain }}'
              value: '{{ network.external_ip }}'

    - role: dns-records
      tags: dns-records-email-pop3
      when: bind.install and mail.pop3
      vars:
        records:
          type: SRV
          list:
            - name: '_pop3._tcp.{{ network.domain }}'
              value: '0 0 0 \.'
            - name: '_pop3s._tcp.{{ network.domain }}'
              value: 'pop3\.{{ network.domain }}'


    # Test submission specific DNS records
    - role: dns-records
      tags: dns-records-email-submission
      when: mail.postfix.submission.active
      vars:
        records:
          type: SRV
          list:
            - name: '_submission._tcp.{{ network.domain }}'
              value: 'smtp\.{{ network.domain }}'


    # Test Jabber client to client functions
    - role: dns-records
      tags: dns-records-jabber-c2s
      when: bind.install and ejabberd.install
      vars:
        records:
          type: A
          list:
            - name: 'xmpp.{{ network.domain }}'
              value: '{{ network.external_ip }}'

    - role: dns-records
      tags: dns-records-jabber-c2s
      when: bind.install and ejabberd.install
      vars:
        records:
          type: SRV
          list:
            - name: '_xmpp-client._tcp.{{ network.domain }}'
              value: 'xmpp\.{{ network.domain }}\.$'


    # Test Jabber server to server functions
    - role: dns-records
      tags: dns-records-jabber-s2s
      when: bind.install and ejabberd.install and ejabberd.s2s.active
      vars:
        records:
          type: SRV
          list:
            - name: '_xmpp-server._tcp.{{ network.domain }}'
              value: 'xmpp\.{{ network.domain }}\.$'

    # DNS records (SSHFP)
    - role: dns-records
      tags: dns-records-sshfp
      when: bind.install and bind.dnssec.active
      vars:
        records:
          type: SSHFP
          list:
            - name: '{{ network.domain }}'
              value: '\s[A-F0-9]{40}$'
            - name: '{{ network.domain }}'
              value: '\s[A-F0-9]{56} [A-F0-9]{8}$'

    # DNS records (Autoconfig)
    - role: dns-records
      tags: dns-records-autoconfig
      when: bind.install and mail.autoconfig
      vars:
        records:
          type: CNAME
          list:
            - name: 'autoconfig.{{ network.domain }}'
              value: 'main.{{ network.domain }}'

    # DNS records (Autodiscover)
    - role: dns-records
      tags: dns-records-autodiscover
      when: bind.install and mail.autodiscover
      vars:
        records:
          type: CNAME
          list:
            - name: 'autodiscover.{{ network.domain }}'
              value: 'main.{{ network.domain }}'

    # Proxies test: privoxy and tor
    - role: privoxy
      tags: privoxy
      when: privoxy.install
      environment:
        http_proxy: 'http://127.0.0.1:{{ privoxy.port }}'
        https_proxy: 'http://127.0.0.1:{{ privoxy.port }}'

    - role: tor
      tags: tor
      when: tor.install


    # Zabbix server
    - role: zabbix
      tags: zabbix
      when: zabbix.install

    # Test https server quality
    - role: https-grade
      tags: https-grade
      when: bind.propagation.check
      vars:
        tests:
          - name: autoconfig
            url: 'https://autoconfig.{{ network.domain }}/mail/config-v1.1.xml'
            expect: 'A+'
            condition: '{{ mail.autoconfig }}'
          - name: autodiscover
            url: 'https://autodiscover.{{ network.domain }}/autodiscover/autodiscover.xml'
            expect: 'A+'
            condition: '{{ mail.autodiscover }}'
          - name: www
            url: 'https://www.{{ network.domain }}/'
            expect: 'A+'
            condition: '{{ website.install }}'
          - name: default
            url: 'https://{{ network.domain }}/'
            expect: 'A+'
            condition: '{{ website.install }}'
          - name: roundcube
            url: 'https://webmail.{{ network.domain }}/'
            expect: 'A'
            condition: '{{ webmail.install }}'
          - name: sogo
            url: 'https://sogo.{{ network.domain }}/'
            expect: 'A'
            condition: '{{ sogo.install }}'
          - name: mta_sts
            url: 'https://mta-sts.{{ network.domain }}/'
            expect: 'A+'
            condition: true
